<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><Document></title>

        <!-- jQuery CDN minified (ajax 간편하게 사용하고자 불러옴) -->
        <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>

        <!-- Axios CDN -->
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

</head>
<body>
    <h1><%= title%></h1>

    <!-- 페이지 전송이 없으니 action="" 삭제 -->
    <form name="register">
        <label for="name">이름</label>
        <input type="text" name="name" id="name" required>
        <br>

        <span>성별</span>
        <input type="radio" name="gender" value="남자" id="male" required>
        <label for="male">남자</label>
        <input type="radio" name="gender" value="여자" id="female">
        <label for="female">여자</label>
        <br>

        <button type="button" onclick="ajaxGet();">ajax get 방식 요청</button>
        <button type="button" onclick="ajaxPost();">ajax post 방식 요청</button>
        <br>
        <button type="button" onclick="axiosGet();">axios get 방식 요청</button>
        <button type="button" onclick="axiosPost();">axios post 방식 요청</button>
        <br>
        <button type="button" onclick="fetchGet();">fetch get 방식 요청</button>
        <button type="button" onclick="fetchPost();">fetch post 방식 요청</button>

    </form>

    <div class="result"></div>

    <!-- frontend javascript code -->
    <script>
        const resultBox = document.querySelector(`.result`);

        // 1. ajax
        // 1) GET(ajax) 방식
        function ajaxGet() {
            console.log('click ajaxGet btn!');
            
            // 폼 선택하기
            const form = document.forms['register'];

            // 폼 요소 값을 추출하기
            console.log(form); // 폼 자체가 출력
            console.dir(form); // 폼이 tree 구조로 출력
            console.dir(form.name);
            console.dir(form.gender);
            console.dir(form.name.value); // input에 입력한 name 값 꺼내오기
            console.dir(form.gender.value); // input radio 에서 정의한 value 로 출력 (없으면 뭘 선택하더라도 on으로 출력된다.)

            // 서버로 보낼 데이터 양식 생성하기
            const data = {
                name : form.name.value,
                gender : form.gender.value
            };

            // ajax 비동기 통신 (GET 방식)
            // (서버의 index.js 파일로 유저가 브라우저에 입력한 값을 보냄)
            $.ajax({
                type : `GET`,
                url : `/ajax`, // 이 요청을 받을 "서버 측 경로"
                data, // = data : data // data : {name : form.name.value, gender : form.gender.value }
                success: function (data) {
                    console.log(data); // {name : `이름`, gender : `남자`}
                    resultBox.textContent = `GET /ajax 요청에 대한 응답 완료! ${data.name} 님은 ${data.gender} 입니다.`;
                    resultBox.style.color = `blue`;
                }
            })
        }

        
        // 2) POST(ajax) 방식
        function ajaxPost() {
            console.log(`click ajaxPost btn!`);

            const form = document.forms[`register`];

            const data = {
                name : form.name.value,
                gender : form.gender.value
            };

            $.ajax({
                type : `POST`,
                url : `/ajax`,
                data, 
                success: function (data) {
                    console.log(data);
                    resultBox.textContent = `POST /ajax 요청에 대한 응답 완료! ${data.name} 님은 ${data.gender} 입니다.`;
                    resultBox.style.color = `red`;
                }
            })
        }
        

        // 2. axios
        // 1) GET(axios) 방식
        function axiosGet() {
            console.log('click axiosGet btn!');
        
            
            const form = document.forms['register'];

            const data = {
                    name : form.name.value,
                    gender : form.gender.value
            };

            // axios 비동기 통신 (GET 방식)
            // 동적 폼 전송 유효성 검사
            // 1. 이름 미입력; `이름을 입력해주세요!!`
            // 2. 성별 미입력; `성별을 선택해주세요!!`
            // 3. 이름과 성별이 모두 입력되었다면, 정상적으로 요청 날리기

            // if (!data.name) {
            //     resultBox.textContent = `이름을 입력해주세요`;
            //     resultBox.style.color = `gray`;
            //     return;
            // }

            // if (!data.gender) {
            //     resultBox.textContent = `성별을 입력해주세요`;
            //     resultBox.style.color = `gray`;
            //     return;
            // }

            console.dir(form.name)
            console.dir(form.gender)
            console.log('------')
            console.log(form.name.checkValidity());
            console.log(form.gender[0].checkValidity());
            console.log(form.gender[1].checkValidity());
            // radio type input 은 둘 중 하나라도 check 되면 전부 true 출력, 아니면 false가 출력
            // radio 에 required가 빠지면 골라도 안골라도 true가 뜬다.
            
            if (!form.name.checkValidity()) {
                // !false => true
                resultBox.textContent = '이름을 입력해주세요!!' 
            } else if (!form.gender[0].checkValidity()) {
                resultBox.textContent = '성별을 선택해주세요!!' 
            } else {
                axios({
                    method : "GET",
                    // i) params 키를 이용하지 않는다면 요청 url에 query string을 작성.
                    url : `/axios?name=${form.name.value}&gender=${form.gender.value}`,

                    // ii) params 키를 이용하는 경우
                    // url : "/axios",
                    // params : data,
                    
                }).then(function (res) {
                    console.log(res); // 서버의 응답 결과를 부가적인 정보와 함께 출력
                    console.log(res.data); // index.js 의 res.send(req.query) 그 데이터가 담김
                    // console.log(res.status); // HTTP Status code (상태코드) ex) 200, 404
                    // console.log(res.statusText); // 상태를 텍스트로 표현 ex) OK
                    // console.log(res.headers); // 응답의 헤더
                    // console.log(res.config); // 응답의 설정
                

                    const { name, gender } = res.data; // { name : `홍길동`, gender : `남자`}
                    resultBox.textContent = `GET /axios 요청에 대한 응답 완료! ${name} 님은 ${gender} 입니다.`;
                    resultBox.style.color = `green`;

                }).catch(err => {
                console.error(`Error`, err);
                resultBox.textContent = `에러 발생.. 다시 시도해주세요..`
            })
        }
        }
        

        // 2) POST(axios) 방식
        function axiosPost() {
            console.log('click axiosPost btn!');


            const form = document.forms['register'];

            const data = {
                name : form.name.value,
                gender : form.gender.value
            };

            // axios 비동기 통신 (POST 방식)
            axios({
                method : "POST",
                url : "/axios",
                data, // data : data, // GET 요청이 아닌 요청들은 모두 data 키에 정보를 실어서 보내야 함.
	            }).then(function (res) {
                console.log(res); // 서버의 응답 결과를 부가적인 정보와 함께 출력
                console.log(res.data); // index.js 의 res.send(req.body) 그 데이터가 담김
            
            const { name, gender } = res.data; // { name : `홍길동`, gender : `남자`}
                resultBox.textContent = `POST /axios 요청에 대한 응답 완료! ${data.name} 님은 ${data.gender} 입니다.`;
                resultBox.style.color = `gold`;

        }).catch(err => {
            console.error(`Error`, err);
            resultBox.textContent = `에러 발생.. 다시 시도해주세요..`
        })
        }


        // 3. fetch
        // 1) GET(fetch) 방식
        function fetchGet() {
            console.log('click fetchGet btn!');
            
            const form = document.forms['register'];
            const urlQuery = `?name=${form.name.value}&gender=${form.gender.value}`;

            // const data = {
            //         name : form.name.value,
            //         gender : form.gender.value
            // };


            // fetch() 디폴트로 GET 방식으로 동작
            fetch(`/fetch${urlQuery}`) // = fetch(`fetch${urlQuery}`, { method : `GET`});
                .then((res) => {
                console.log(res); 
                return res.json(); // res 객체로부터 JSON 포맷의 응답을 js obj로 변환 (axios는 자동으로 해줌 / 가장 큰 차이점)
            })
            .then((data) => {
                console.log(data); 
                resultBox.textContent = `GET /fetch 요청에 대한 응답 완료! ${data.name} 님은 ${data.gender} 입니다.`;
                resultBox.style.color = `limegreen`;

            }).catch(err => {
            console.error(`Error`, err);
            resultBox.textContent = `에러 발생.. 다시 시도해주세요..`
            })
        }
        

        // 2) POST(fetch) 방식
        function fetchPost() {
            console.log('click fetchGet btn!');
                    
            const form = document.forms['register'];
            
            const data = {
                    name : form.name.value,
                    gender : form.gender.value
            };


            // fetch: POST 요청 시 headers 옵션을 통해 JSON 포맷을 사용한다고 알려줘야 함.
            // => body에서도 json 형식으로 데이터를 바꾸어 보내야 함.
            fetch(`/fetch`, {
                method : `POST`,
                headers : {
                    'Content-Type' : 'application/json',
                },
                body : JSON.stringify(data), // js obj to json
                })
                .then((res) => {
                    console.log(res); 
                    return res.json(); // res 객체로부터 JSON 포맷의 응답을 js obj로 변환
                })
                .then((data) => {
                    console.log(data); 
                    resultBox.textContent = `POST /fetch 요청에 대한 응답 완료! ${data.name} 님은 ${data.gender} 입니다.`;
                    resultBox.style.color = `hotpink`;

                }).catch(err => {
                console.error(`Error`, err);
                resultBox.textContent = `에러 발생.. 다시 시도해주세요..`
                })
            };

    
    </script>
</body>
</html>