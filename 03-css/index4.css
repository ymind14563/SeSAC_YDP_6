.div1 {
    width: 100px;
    height: 100px;
    background-color: aquamarine;
}

/* 
    :hover : 요소의 마우스를 올렸을 떄
*/
.div1:hover {
    background-color: hotpink;
    width: 150px;
    height: 150px;
}

/* 
    :active : 요소를 마우스로 클릭하고 있을 때
*/
.div1:active {
    background-color: brown;
    width: 200px;
}

/* 
    :focus : 요소에 포커스가 되었을 때
 */
 input:focus {
    background-color: violet;
    color: lightblue;
    outline-color: yellowgreen;
 }

 .links > a:hover {
    background-color: coral;
 }

 .links > a:visited {
    color: red;
 }


 /* 요소 상황에 따른 가상 클래스 선택자 */
.zoo > * {
    background-color: green;
    color: white;
}

/* 
    #1. E:first-child : E(요소)가 첫번째 요소라면 가상 상황
 */
 .zoo > *:first-child {
    background-color: red;
 }

 /* #2. E:last-child : E(요소)가 마지막 요소라면 */
 .zoo > *:last-child {
    background-color: black;
 }

 /* #3. E:nth-child(n) : E(요소)가 n번째 요소라면 */
 .zoo > *:nth-child(2) {
    background-color: aqua;
 }

 /* #4. E:not(XYZ) : XYZ가 아닌 요소 선택 */
 .zoo > *:not(div) {
    background-color: pink;
 }

  /* 와일드카드(*)은 전부 생략 가능하다. */



 /* 가상요소 : before, after */
 /* 
    - HTML 문서의 특정 부분을 스타일링하기 위해 사용
    - 실제로 HTML 문서에 존재하지 않는 부분이지만 CSS를 통해 스타일 적용이 가능.

    Q) 가상클래스 : , 가상요소 :: 의 차이?
    A) CSS사양이 발전하면서 가상클래스와 가상 요소를 명확하게 구분할 필요성이 생김.
    가상 클래스 - 문서의 기존 요소 상태를 나타냄.
    가상 요소 - 문서의 특정 부분을 생성하여 스타일링함.
    그렇기에 구분하기 위해서 :: 로 표기하는 새로운 표기법을 도입.
*/

.box::before {
    content: "소방차";
    color: red;
}

.box::after {
    content: "여기";
    color: white !important;
    background-color: blue;
}

.box::after {
    content: "여기";
    color: black;
    background-color: red;
}

/* !important : 가장 우선 순위가 높다. */